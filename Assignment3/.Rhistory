#          #  print (cat(usState ,";",getrank))
#        }
#         getRankedHospitalsForState <- as.data.frame(subset(allStateData, allStateData$hrank==getrank & allStateData$State == usState, select=c(1,3)))
#
#         if(NROW(getRankedHospitalsForState)>0){
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, getRankedHospitalsForState)
#             }
#             else{
#                 allRankedHospitals <- getRankedHospitalsForState
#             }
#
#         }
#         else{
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, c(NA, usState))
#             }
#             else{
#                 allRankedHospitals <-  as.data.frame(matrix(nrow = 1, ncol = 2))
#                 colnames(allRankedHospitals) <- c("Hospital.Name","State")
#                 allRankedHospitals[1,1] <- NA
#                 allRankedHospitals[1,2] <- usState
#
#             }
#         }
#       # print(allRankedHospitals)
#      #  break
#    }
#    if(exists("allRankedHospitals"))
#    {
#       # print(str(allRankedHospitals))
#        colnames(allRankedHospitals) = c("hospital","state")
#        allRankedHospitals <- allRankedHospitals[-1,]
#
#         allRankedHospitals
#    }
# rank all hospitals for each state for the outcome exclude Null for outcome
# filter from each
}
head(rankall("heart attack", 20), 10)
#rankall
rankall <- function(outcome, num = "best"){
options(warn=-1)
setwd("d:/nanda/r-programming/assignment3/")
outcomedata <- as.data.frame(read.csv("outcome-of-care-measures.csv", colClasses="character"))
if (outcome %in% c("Heart Attack", "Heart Failure", "PNEUMONIA")) stop("Invalid Outcome")
# check if outcome is valid, else raise stop error
if(toupper(outcome) == "HEART ATTACK"){
getcolno <- 11
}
else if(toupper(outcome) == "HEART FAILURE"){
getcolno <- 17
}
else if (toupper(outcome) == "PNEUMONIA"){
getcolno <- 23
}
else{
stop("Invalid outcome")
}
# check if num is valid
# best, worst, numeric
if(toupper(num) == "BEST" ){
getrank <- 1
}
else if(toupper(num) == "WORST"){
getrank <- 9999
}
else if(!is.numeric(num)){
getrank <- as.numeric(num)
if(!is.numeric(getrank)){
stop("Invalid num")
}
}
else
{
getrank <- as.numeric(num)
}
# read all state and create a vector of unique states
# outcomedata <- as.data.frame(read.csv("outcome-of-care-measures.csv", colClasses="character"))
outcomedatabyState <-  split(outcomedata,outcomedata$State)
print(attr(outcomedatabyState, names))
#print(cat(nrow(outcomedatabyState), ";", ncol(outcomedatabyState)))
#print(ncol(outcomedatabyState))
stop
#outcomebyState <- apply(outcomedatabyState,outcomedatabyState[[getcolno]], min)
#print(head(outcomebyState))
stop
uniqueState <- as.data.frame(unique(outcomedata$State))
#print(typeof(uniqueState))
uniqueState <- uniqueState[order(uniqueState[[1]]),]
#print(uniqueState[[1]])
#break
for ( usState in uniqueState){
getdata1 <- as.data.frame(subset(outcomedata,outcomedata$State == usState,select=c(2,getcolno,7)))
getdata1[[2]] <- as.numeric(getdata1[[2]])
#print(cat(NROW(getdata1), NCOL(getdata1)))
getdata1 <- na.omit(getdata1)
getdata1 <- getdata1[order(getdata1[[2]],getdata1[[1]]),]
hrank <- rank(getdata1[[2]], na.last=TRUE, ties.method="first")
getdata1 <- cbind(getdata1, hrank)
#   print(getdata1)
if (exists("allStateData")){
allStateData <- rbind(allStateData, getdata1)
}
else{
allStateData <- getdata1
}
# break
}
#  print(str(allStateData))
# print(cat(getrank, ))
# by(allStateData, allStateData$State, function(x){x[order(x[[4]], x[[1]]), ]})
#    for ( usState in uniqueState){
#        if(getrank == 9999 | toupper(num)=="WORST")
#        {
#
#            getrank <- max(subset(allStateData, allStateData$State == usState)[[4]])
#          #  print (cat(usState ,";",getrank))
#        }
#         getRankedHospitalsForState <- as.data.frame(subset(allStateData, allStateData$hrank==getrank & allStateData$State == usState, select=c(1,3)))
#
#         if(NROW(getRankedHospitalsForState)>0){
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, getRankedHospitalsForState)
#             }
#             else{
#                 allRankedHospitals <- getRankedHospitalsForState
#             }
#
#         }
#         else{
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, c(NA, usState))
#             }
#             else{
#                 allRankedHospitals <-  as.data.frame(matrix(nrow = 1, ncol = 2))
#                 colnames(allRankedHospitals) <- c("Hospital.Name","State")
#                 allRankedHospitals[1,1] <- NA
#                 allRankedHospitals[1,2] <- usState
#
#             }
#         }
#       # print(allRankedHospitals)
#      #  break
#    }
#    if(exists("allRankedHospitals"))
#    {
#       # print(str(allRankedHospitals))
#        colnames(allRankedHospitals) = c("hospital","state")
#        allRankedHospitals <- allRankedHospitals[-1,]
#
#         allRankedHospitals
#    }
# rank all hospitals for each state for the outcome exclude Null for outcome
# filter from each
}
head(rankall("heart attack", 20), 10)
#rankall
rankall <- function(outcome, num = "best"){
options(warn=-1)
setwd("d:/nanda/r-programming/assignment3/")
outcomedata <- as.data.frame(read.csv("outcome-of-care-measures.csv", colClasses="character"))
if (outcome %in% c("Heart Attack", "Heart Failure", "PNEUMONIA")) stop("Invalid Outcome")
# check if outcome is valid, else raise stop error
if(toupper(outcome) == "HEART ATTACK"){
getcolno <- 11
}
else if(toupper(outcome) == "HEART FAILURE"){
getcolno <- 17
}
else if (toupper(outcome) == "PNEUMONIA"){
getcolno <- 23
}
else{
stop("Invalid outcome")
}
# check if num is valid
# best, worst, numeric
if(toupper(num) == "BEST" ){
getrank <- 1
}
else if(toupper(num) == "WORST"){
getrank <- 9999
}
else if(!is.numeric(num)){
getrank <- as.numeric(num)
if(!is.numeric(getrank)){
stop("Invalid num")
}
}
else
{
getrank <- as.numeric(num)
}
# read all state and create a vector of unique states
# outcomedata <- as.data.frame(read.csv("outcome-of-care-measures.csv", colClasses="character"))
outcomedatabyState <-  split(outcomedata,outcomedata$State)
print(attr(outcomedatabyState, which="names"))
#print(cat(nrow(outcomedatabyState), ";", ncol(outcomedatabyState)))
#print(ncol(outcomedatabyState))
stop
#outcomebyState <- apply(outcomedatabyState,outcomedatabyState[[getcolno]], min)
#print(head(outcomebyState))
stop
uniqueState <- as.data.frame(unique(outcomedata$State))
#print(typeof(uniqueState))
uniqueState <- uniqueState[order(uniqueState[[1]]),]
#print(uniqueState[[1]])
#break
for ( usState in uniqueState){
getdata1 <- as.data.frame(subset(outcomedata,outcomedata$State == usState,select=c(2,getcolno,7)))
getdata1[[2]] <- as.numeric(getdata1[[2]])
#print(cat(NROW(getdata1), NCOL(getdata1)))
getdata1 <- na.omit(getdata1)
getdata1 <- getdata1[order(getdata1[[2]],getdata1[[1]]),]
hrank <- rank(getdata1[[2]], na.last=TRUE, ties.method="first")
getdata1 <- cbind(getdata1, hrank)
#   print(getdata1)
if (exists("allStateData")){
allStateData <- rbind(allStateData, getdata1)
}
else{
allStateData <- getdata1
}
# break
}
#  print(str(allStateData))
# print(cat(getrank, ))
# by(allStateData, allStateData$State, function(x){x[order(x[[4]], x[[1]]), ]})
#    for ( usState in uniqueState){
#        if(getrank == 9999 | toupper(num)=="WORST")
#        {
#
#            getrank <- max(subset(allStateData, allStateData$State == usState)[[4]])
#          #  print (cat(usState ,";",getrank))
#        }
#         getRankedHospitalsForState <- as.data.frame(subset(allStateData, allStateData$hrank==getrank & allStateData$State == usState, select=c(1,3)))
#
#         if(NROW(getRankedHospitalsForState)>0){
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, getRankedHospitalsForState)
#             }
#             else{
#                 allRankedHospitals <- getRankedHospitalsForState
#             }
#
#         }
#         else{
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, c(NA, usState))
#             }
#             else{
#                 allRankedHospitals <-  as.data.frame(matrix(nrow = 1, ncol = 2))
#                 colnames(allRankedHospitals) <- c("Hospital.Name","State")
#                 allRankedHospitals[1,1] <- NA
#                 allRankedHospitals[1,2] <- usState
#
#             }
#         }
#       # print(allRankedHospitals)
#      #  break
#    }
#    if(exists("allRankedHospitals"))
#    {
#       # print(str(allRankedHospitals))
#        colnames(allRankedHospitals) = c("hospital","state")
#        allRankedHospitals <- allRankedHospitals[-1,]
#
#         allRankedHospitals
#    }
# rank all hospitals for each state for the outcome exclude Null for outcome
# filter from each
}
head(rankall("heart attack", 20), 10)
#rankall
rankall <- function(outcome, num = "best"){
options(warn=-1)
setwd("d:/nanda/r-programming/assignment3/")
outcomedata <- as.data.frame(read.csv("outcome-of-care-measures.csv", colClasses="character"))
if (outcome %in% c("Heart Attack", "Heart Failure", "PNEUMONIA")) stop("Invalid Outcome")
# check if outcome is valid, else raise stop error
if(toupper(outcome) == "HEART ATTACK"){
getcolno <- 11
}
else if(toupper(outcome) == "HEART FAILURE"){
getcolno <- 17
}
else if (toupper(outcome) == "PNEUMONIA"){
getcolno <- 23
}
else{
stop("Invalid outcome")
}
# check if num is valid
# best, worst, numeric
if(toupper(num) == "BEST" ){
getrank <- 1
}
else if(toupper(num) == "WORST"){
getrank <- 9999
}
else if(!is.numeric(num)){
getrank <- as.numeric(num)
if(!is.numeric(getrank)){
stop("Invalid num")
}
}
else
{
getrank <- as.numeric(num)
}
# read all state and create a vector of unique states
# outcomedata <- as.data.frame(read.csv("outcome-of-care-measures.csv", colClasses="character"))
outcomedatabyState <-  split(outcomedata,outcomedata$State)
apply(outcomedatabyState,outcomedatabyState, min)
testap <- lapply(outcomedatabyState[getcolno], min)
print(testap)
#print(cat(nrow(outcomedatabyState), ";", ncol(outcomedatabyState)))
#print(ncol(outcomedatabyState))
stop
#outcomebyState <- apply(outcomedatabyState,outcomedatabyState[[getcolno]], min)
#print(head(outcomebyState))
stop
uniqueState <- as.data.frame(unique(outcomedata$State))
#print(typeof(uniqueState))
uniqueState <- uniqueState[order(uniqueState[[1]]),]
#print(uniqueState[[1]])
#break
for ( usState in uniqueState){
getdata1 <- as.data.frame(subset(outcomedata,outcomedata$State == usState,select=c(2,getcolno,7)))
getdata1[[2]] <- as.numeric(getdata1[[2]])
#print(cat(NROW(getdata1), NCOL(getdata1)))
getdata1 <- na.omit(getdata1)
getdata1 <- getdata1[order(getdata1[[2]],getdata1[[1]]),]
hrank <- rank(getdata1[[2]], na.last=TRUE, ties.method="first")
getdata1 <- cbind(getdata1, hrank)
#   print(getdata1)
if (exists("allStateData")){
allStateData <- rbind(allStateData, getdata1)
}
else{
allStateData <- getdata1
}
# break
}
#  print(str(allStateData))
# print(cat(getrank, ))
# by(allStateData, allStateData$State, function(x){x[order(x[[4]], x[[1]]), ]})
#    for ( usState in uniqueState){
#        if(getrank == 9999 | toupper(num)=="WORST")
#        {
#
#            getrank <- max(subset(allStateData, allStateData$State == usState)[[4]])
#          #  print (cat(usState ,";",getrank))
#        }
#         getRankedHospitalsForState <- as.data.frame(subset(allStateData, allStateData$hrank==getrank & allStateData$State == usState, select=c(1,3)))
#
#         if(NROW(getRankedHospitalsForState)>0){
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, getRankedHospitalsForState)
#             }
#             else{
#                 allRankedHospitals <- getRankedHospitalsForState
#             }
#
#         }
#         else{
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, c(NA, usState))
#             }
#             else{
#                 allRankedHospitals <-  as.data.frame(matrix(nrow = 1, ncol = 2))
#                 colnames(allRankedHospitals) <- c("Hospital.Name","State")
#                 allRankedHospitals[1,1] <- NA
#                 allRankedHospitals[1,2] <- usState
#
#             }
#         }
#       # print(allRankedHospitals)
#      #  break
#    }
#    if(exists("allRankedHospitals"))
#    {
#       # print(str(allRankedHospitals))
#        colnames(allRankedHospitals) = c("hospital","state")
#        allRankedHospitals <- allRankedHospitals[-1,]
#
#         allRankedHospitals
#    }
# rank all hospitals for each state for the outcome exclude Null for outcome
# filter from each
}
head(rankall("heart attack", 20), 10)
#rankall
rankall <- function(outcome, num = "best"){
options(warn=-1)
setwd("d:/nanda/r-programming/assignment3/")
outcomedata <- as.data.frame(read.csv("outcome-of-care-measures.csv", colClasses="character"))
if (outcome %in% c("Heart Attack", "Heart Failure", "PNEUMONIA")) stop("Invalid Outcome")
# check if outcome is valid, else raise stop error
if(toupper(outcome) == "HEART ATTACK"){
getcolno <- 11
}
else if(toupper(outcome) == "HEART FAILURE"){
getcolno <- 17
}
else if (toupper(outcome) == "PNEUMONIA"){
getcolno <- 23
}
else{
stop("Invalid outcome")
}
# check if num is valid
# best, worst, numeric
if(toupper(num) == "BEST" ){
getrank <- 1
}
else if(toupper(num) == "WORST"){
getrank <- 9999
}
else if(!is.numeric(num)){
getrank <- as.numeric(num)
if(!is.numeric(getrank)){
stop("Invalid num")
}
}
else
{
getrank <- as.numeric(num)
}
# read all state and create a vector of unique states
# outcomedata <- as.data.frame(read.csv("outcome-of-care-measures.csv", colClasses="character"))
outcomedatabyState <-  split(outcomedata,outcomedata$State)
testap <- lapply(outcomedatabyState,function(x){ min(x[,getcolno])})
#testap <- lapply(outcomedatabyState[getcolno], min)
print(testap)
#print(cat(nrow(outcomedatabyState), ";", ncol(outcomedatabyState)))
#print(ncol(outcomedatabyState))
stop
#outcomebyState <- apply(outcomedatabyState,outcomedatabyState[[getcolno]], min)
#print(head(outcomebyState))
stop
uniqueState <- as.data.frame(unique(outcomedata$State))
#print(typeof(uniqueState))
uniqueState <- uniqueState[order(uniqueState[[1]]),]
#print(uniqueState[[1]])
#break
for ( usState in uniqueState){
getdata1 <- as.data.frame(subset(outcomedata,outcomedata$State == usState,select=c(2,getcolno,7)))
getdata1[[2]] <- as.numeric(getdata1[[2]])
#print(cat(NROW(getdata1), NCOL(getdata1)))
getdata1 <- na.omit(getdata1)
getdata1 <- getdata1[order(getdata1[[2]],getdata1[[1]]),]
hrank <- rank(getdata1[[2]], na.last=TRUE, ties.method="first")
getdata1 <- cbind(getdata1, hrank)
#   print(getdata1)
if (exists("allStateData")){
allStateData <- rbind(allStateData, getdata1)
}
else{
allStateData <- getdata1
}
# break
}
#  print(str(allStateData))
# print(cat(getrank, ))
# by(allStateData, allStateData$State, function(x){x[order(x[[4]], x[[1]]), ]})
#    for ( usState in uniqueState){
#        if(getrank == 9999 | toupper(num)=="WORST")
#        {
#
#            getrank <- max(subset(allStateData, allStateData$State == usState)[[4]])
#          #  print (cat(usState ,";",getrank))
#        }
#         getRankedHospitalsForState <- as.data.frame(subset(allStateData, allStateData$hrank==getrank & allStateData$State == usState, select=c(1,3)))
#
#         if(NROW(getRankedHospitalsForState)>0){
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, getRankedHospitalsForState)
#             }
#             else{
#                 allRankedHospitals <- getRankedHospitalsForState
#             }
#
#         }
#         else{
#             if(exists("allRankedHospitals")){
#                 allRankedHospitals <- rbind(allRankedHospitals, c(NA, usState))
#             }
#             else{
#                 allRankedHospitals <-  as.data.frame(matrix(nrow = 1, ncol = 2))
#                 colnames(allRankedHospitals) <- c("Hospital.Name","State")
#                 allRankedHospitals[1,1] <- NA
#                 allRankedHospitals[1,2] <- usState
#
#             }
#         }
#       # print(allRankedHospitals)
#      #  break
#    }
#    if(exists("allRankedHospitals"))
#    {
#       # print(str(allRankedHospitals))
#        colnames(allRankedHospitals) = c("hospital","state")
#        allRankedHospitals <- allRankedHospitals[-1,]
#
#         allRankedHospitals
#    }
# rank all hospitals for each state for the outcome exclude Null for outcome
# filter from each
}
head(rankall("heart attack", 20), 10)
